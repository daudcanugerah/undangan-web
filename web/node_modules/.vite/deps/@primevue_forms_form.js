import {
  script
} from "./chunk-SS4N6IQP.js";
import "./chunk-7MBYTLHB.js";
import {
  BaseStyle,
  isArray,
  isEmpty,
  isNotEmpty,
  mergeKeys,
  omit,
  resolve
} from "./chunk-FL273YCI.js";
import "./chunk-62QC3C3J.js";
import {
  computed,
  createElementBlock,
  getCurrentInstance,
  mergeProps,
  nextTick,
  onMounted,
  openBlock,
  reactive,
  ref,
  renderSlot,
  toValue,
  watch,
  withModifiers
} from "./chunk-ZOM7A6AN.js";
import "./chunk-BUSYA2B4.js";

// node_modules/.pnpm/@primevue+forms@4.3.4_vue@3.5.16/node_modules/@primevue/forms/useform/index.mjs
function _typeof(o) {
  "@babel/helpers - typeof";
  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
    return typeof o2;
  } : function(o2) {
    return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
  }, _typeof(o);
}
function ownKeys(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
function _defineProperty(e, r, t) {
  return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e;
}
function _toPropertyKey(t) {
  var i = _toPrimitive(t, "string");
  return "symbol" == _typeof(i) ? i : i + "";
}
function _toPrimitive(t, r) {
  if ("object" != _typeof(t) || !t) return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r);
    if ("object" != _typeof(i)) return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
function _regeneratorRuntime() {
  _regeneratorRuntime = function _regeneratorRuntime2() {
    return r;
  };
  var t, r = {}, e = Object.prototype, n = e.hasOwnProperty, o = "function" == typeof Symbol ? Symbol : {}, i = o.iterator || "@@iterator", a = o.asyncIterator || "@@asyncIterator", u = o.toStringTag || "@@toStringTag";
  function c(t2, r2, e2, n2) {
    return Object.defineProperty(t2, r2, { value: e2, enumerable: !n2, configurable: !n2, writable: !n2 });
  }
  try {
    c({}, "");
  } catch (t2) {
    c = function c2(t3, r2, e2) {
      return t3[r2] = e2;
    };
  }
  function h(r2, e2, n2, o2) {
    var i2 = e2 && e2.prototype instanceof Generator ? e2 : Generator, a2 = Object.create(i2.prototype);
    return c(a2, "_invoke", /* @__PURE__ */ function(r3, e3, n3) {
      var o3 = 1;
      return function(i3, a3) {
        if (3 === o3) throw Error("Generator is already running");
        if (4 === o3) {
          if ("throw" === i3) throw a3;
          return { value: t, done: true };
        }
        for (n3.method = i3, n3.arg = a3; ; ) {
          var u2 = n3.delegate;
          if (u2) {
            var c2 = d(u2, n3);
            if (c2) {
              if (c2 === f) continue;
              return c2;
            }
          }
          if ("next" === n3.method) n3.sent = n3._sent = n3.arg;
          else if ("throw" === n3.method) {
            if (1 === o3) throw o3 = 4, n3.arg;
            n3.dispatchException(n3.arg);
          } else "return" === n3.method && n3.abrupt("return", n3.arg);
          o3 = 3;
          var h2 = s(r3, e3, n3);
          if ("normal" === h2.type) {
            if (o3 = n3.done ? 4 : 2, h2.arg === f) continue;
            return { value: h2.arg, done: n3.done };
          }
          "throw" === h2.type && (o3 = 4, n3.method = "throw", n3.arg = h2.arg);
        }
      };
    }(r2, n2, new Context(o2 || [])), true), a2;
  }
  function s(t2, r2, e2) {
    try {
      return { type: "normal", arg: t2.call(r2, e2) };
    } catch (t3) {
      return { type: "throw", arg: t3 };
    }
  }
  r.wrap = h;
  var f = {};
  function Generator() {
  }
  function GeneratorFunction() {
  }
  function GeneratorFunctionPrototype() {
  }
  var l = {};
  c(l, i, function() {
    return this;
  });
  var p = Object.getPrototypeOf, y = p && p(p(x([])));
  y && y !== e && n.call(y, i) && (l = y);
  var v = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(l);
  function g(t2) {
    ["next", "throw", "return"].forEach(function(r2) {
      c(t2, r2, function(t3) {
        return this._invoke(r2, t3);
      });
    });
  }
  function AsyncIterator(t2, r2) {
    function e2(o3, i2, a2, u2) {
      var c2 = s(t2[o3], t2, i2);
      if ("throw" !== c2.type) {
        var h2 = c2.arg, f2 = h2.value;
        return f2 && "object" == _typeof(f2) && n.call(f2, "__await") ? r2.resolve(f2.__await).then(function(t3) {
          e2("next", t3, a2, u2);
        }, function(t3) {
          e2("throw", t3, a2, u2);
        }) : r2.resolve(f2).then(function(t3) {
          h2.value = t3, a2(h2);
        }, function(t3) {
          return e2("throw", t3, a2, u2);
        });
      }
      u2(c2.arg);
    }
    var o2;
    c(this, "_invoke", function(t3, n2) {
      function i2() {
        return new r2(function(r3, o3) {
          e2(t3, n2, r3, o3);
        });
      }
      return o2 = o2 ? o2.then(i2, i2) : i2();
    }, true);
  }
  function d(r2, e2) {
    var n2 = e2.method, o2 = r2.i[n2];
    if (o2 === t) return e2.delegate = null, "throw" === n2 && r2.i["return"] && (e2.method = "return", e2.arg = t, d(r2, e2), "throw" === e2.method) || "return" !== n2 && (e2.method = "throw", e2.arg = new TypeError("The iterator does not provide a '" + n2 + "' method")), f;
    var i2 = s(o2, r2.i, e2.arg);
    if ("throw" === i2.type) return e2.method = "throw", e2.arg = i2.arg, e2.delegate = null, f;
    var a2 = i2.arg;
    return a2 ? a2.done ? (e2[r2.r] = a2.value, e2.next = r2.n, "return" !== e2.method && (e2.method = "next", e2.arg = t), e2.delegate = null, f) : a2 : (e2.method = "throw", e2.arg = new TypeError("iterator result is not an object"), e2.delegate = null, f);
  }
  function w(t2) {
    this.tryEntries.push(t2);
  }
  function m(r2) {
    var e2 = r2[4] || {};
    e2.type = "normal", e2.arg = t, r2[4] = e2;
  }
  function Context(t2) {
    this.tryEntries = [[-1]], t2.forEach(w, this), this.reset(true);
  }
  function x(r2) {
    if (null != r2) {
      var e2 = r2[i];
      if (e2) return e2.call(r2);
      if ("function" == typeof r2.next) return r2;
      if (!isNaN(r2.length)) {
        var o2 = -1, a2 = function e3() {
          for (; ++o2 < r2.length; ) if (n.call(r2, o2)) return e3.value = r2[o2], e3.done = false, e3;
          return e3.value = t, e3.done = true, e3;
        };
        return a2.next = a2;
      }
    }
    throw new TypeError(_typeof(r2) + " is not iterable");
  }
  return GeneratorFunction.prototype = GeneratorFunctionPrototype, c(v, "constructor", GeneratorFunctionPrototype), c(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = c(GeneratorFunctionPrototype, u, "GeneratorFunction"), r.isGeneratorFunction = function(t2) {
    var r2 = "function" == typeof t2 && t2.constructor;
    return !!r2 && (r2 === GeneratorFunction || "GeneratorFunction" === (r2.displayName || r2.name));
  }, r.mark = function(t2) {
    return Object.setPrototypeOf ? Object.setPrototypeOf(t2, GeneratorFunctionPrototype) : (t2.__proto__ = GeneratorFunctionPrototype, c(t2, u, "GeneratorFunction")), t2.prototype = Object.create(v), t2;
  }, r.awrap = function(t2) {
    return { __await: t2 };
  }, g(AsyncIterator.prototype), c(AsyncIterator.prototype, a, function() {
    return this;
  }), r.AsyncIterator = AsyncIterator, r.async = function(t2, e2, n2, o2, i2) {
    void 0 === i2 && (i2 = Promise);
    var a2 = new AsyncIterator(h(t2, e2, n2, o2), i2);
    return r.isGeneratorFunction(e2) ? a2 : a2.next().then(function(t3) {
      return t3.done ? t3.value : a2.next();
    });
  }, g(v), c(v, u, "Generator"), c(v, i, function() {
    return this;
  }), c(v, "toString", function() {
    return "[object Generator]";
  }), r.keys = function(t2) {
    var r2 = Object(t2), e2 = [];
    for (var n2 in r2) e2.unshift(n2);
    return function t3() {
      for (; e2.length; ) if ((n2 = e2.pop()) in r2) return t3.value = n2, t3.done = false, t3;
      return t3.done = true, t3;
    };
  }, r.values = x, Context.prototype = { constructor: Context, reset: function reset(r2) {
    if (this.prev = this.next = 0, this.sent = this._sent = t, this.done = false, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(m), !r2) for (var e2 in this) "t" === e2.charAt(0) && n.call(this, e2) && !isNaN(+e2.slice(1)) && (this[e2] = t);
  }, stop: function stop() {
    this.done = true;
    var t2 = this.tryEntries[0][4];
    if ("throw" === t2.type) throw t2.arg;
    return this.rval;
  }, dispatchException: function dispatchException(r2) {
    if (this.done) throw r2;
    var e2 = this;
    function n2(t2) {
      a2.type = "throw", a2.arg = r2, e2.next = t2;
    }
    for (var o2 = e2.tryEntries.length - 1; o2 >= 0; --o2) {
      var i2 = this.tryEntries[o2], a2 = i2[4], u2 = this.prev, c2 = i2[1], h2 = i2[2];
      if (-1 === i2[0]) return n2("end"), false;
      if (!c2 && !h2) throw Error("try statement without catch or finally");
      if (null != i2[0] && i2[0] <= u2) {
        if (u2 < c2) return this.method = "next", this.arg = t, n2(c2), true;
        if (u2 < h2) return n2(h2), false;
      }
    }
  }, abrupt: function abrupt(t2, r2) {
    for (var e2 = this.tryEntries.length - 1; e2 >= 0; --e2) {
      var n2 = this.tryEntries[e2];
      if (n2[0] > -1 && n2[0] <= this.prev && this.prev < n2[2]) {
        var o2 = n2;
        break;
      }
    }
    o2 && ("break" === t2 || "continue" === t2) && o2[0] <= r2 && r2 <= o2[2] && (o2 = null);
    var i2 = o2 ? o2[4] : {};
    return i2.type = t2, i2.arg = r2, o2 ? (this.method = "next", this.next = o2[2], f) : this.complete(i2);
  }, complete: function complete(t2, r2) {
    if ("throw" === t2.type) throw t2.arg;
    return "break" === t2.type || "continue" === t2.type ? this.next = t2.arg : "return" === t2.type ? (this.rval = this.arg = t2.arg, this.method = "return", this.next = "end") : "normal" === t2.type && r2 && (this.next = r2), f;
  }, finish: function finish(t2) {
    for (var r2 = this.tryEntries.length - 1; r2 >= 0; --r2) {
      var e2 = this.tryEntries[r2];
      if (e2[2] === t2) return this.complete(e2[4], e2[3]), m(e2), f;
    }
  }, "catch": function _catch(t2) {
    for (var r2 = this.tryEntries.length - 1; r2 >= 0; --r2) {
      var e2 = this.tryEntries[r2];
      if (e2[0] === t2) {
        var n2 = e2[4];
        if ("throw" === n2.type) {
          var o2 = n2.arg;
          m(e2);
        }
        return o2;
      }
    }
    throw Error("illegal catch attempt");
  }, delegateYield: function delegateYield(r2, e2, n2) {
    return this.delegate = { i: x(r2), r: e2, n: n2 }, "next" === this.method && (this.arg = t), f;
  } }, r;
}
function asyncGeneratorStep(n, t, e, r, o, a, c) {
  try {
    var i = n[a](c), u = i.value;
  } catch (n2) {
    return void e(n2);
  }
  i.done ? t(u) : Promise.resolve(u).then(r, o);
}
function _asyncToGenerator(n) {
  return function() {
    var t = this, e = arguments;
    return new Promise(function(r, o) {
      var a = n.apply(t, e);
      function _next(n2) {
        asyncGeneratorStep(a, r, o, _next, _throw, "next", n2);
      }
      function _throw(n2) {
        asyncGeneratorStep(a, r, o, _next, _throw, "throw", n2);
      }
      _next(void 0);
    });
  };
}
function _slicedToArray(r, e) {
  return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest();
}
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray(r, a) {
  if (r) {
    if ("string" == typeof r) return _arrayLikeToArray(r, a);
    var t = {}.toString.call(r).slice(8, -1);
    return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
  }
}
function _arrayLikeToArray(r, a) {
  (null == a || a > r.length) && (a = r.length);
  for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];
  return n;
}
function _iterableToArrayLimit(r, l) {
  var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (null != t) {
    var e, n, i, u, a = [], f = true, o = false;
    try {
      if (i = (t = t.call(r)).next, 0 === l) ;
      else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = true) ;
    } catch (r2) {
      o = true, n = r2;
    } finally {
      try {
        if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return;
      } finally {
        if (o) throw n;
      }
    }
    return a;
  }
}
function _arrayWithHoles(r) {
  if (Array.isArray(r)) return r;
}
function tryOnMounted(fn) {
  var sync = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
  if (getCurrentInstance()) onMounted(fn);
  else if (sync) fn();
  else nextTick(fn);
}
function watchPausable(source, callback, options) {
  var isActive = ref(true);
  var stop = watch(source, function(newValue, oldValue) {
    if (!isActive.value) return;
    callback(newValue, oldValue);
  }, options);
  return {
    stop,
    pause: function pause() {
      isActive.value = false;
    },
    resume: function resume() {
      isActive.value = true;
    }
  };
}
function groupKeys(obj) {
  return Object.entries(obj).reduce(function(result, _ref) {
    var _ref2 = _slicedToArray(_ref, 2), key = _ref2[0], value = _ref2[1];
    key.split(/[\.\[\]]+/).filter(Boolean).reduce(function(acc, curr, idx, arr) {
      var _acc$curr;
      return (_acc$curr = acc[curr]) !== null && _acc$curr !== void 0 ? _acc$curr : acc[curr] = isNaN(arr[idx + 1]) ? idx === arr.length - 1 ? value : {} : [];
    }, result);
    return result;
  }, {});
}
function getValueByPath(obj, path) {
  if (!obj || !path) {
    return null;
  }
  try {
    var value = obj[path];
    if (isNotEmpty(value)) return value;
  } catch (_unused) {
  }
  var keys = path.split(/[\.\[\]]+/).filter(Boolean);
  return keys.reduce(function(acc, key) {
    return acc && acc[key] !== void 0 ? acc[key] : void 0;
  }, obj);
}
var useForm = function useForm2() {
  var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
  var _states = reactive({});
  var fields = reactive({});
  var valid = computed(function() {
    return Object.values(_states).every(function(field) {
      return !field.invalid;
    });
  });
  var states = computed(function() {
    return groupKeys(_states);
  });
  var getInitialState = function getInitialState2(field, initialValue) {
    return {
      value: initialValue !== null && initialValue !== void 0 ? initialValue : getValueByPath(options.initialValues, field),
      touched: false,
      dirty: false,
      pristine: true,
      valid: true,
      invalid: false,
      error: null,
      errors: []
    };
  };
  var isFieldValidate = function isFieldValidate2(field, validateOn2) {
    var value = resolve(validateOn2, field);
    return value === true || isArray(value) && value.includes(field);
  };
  var validateOn = function() {
    var _ref3 = _asyncToGenerator(_regeneratorRuntime().mark(function _callee(option, defaultValue) {
      var _options$option;
      var results, fieldArr;
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            results = {};
            if (!isArray(options[option])) {
              _context.next = 7;
              break;
            }
            _context.next = 4;
            return validate(options[option]);
          case 4:
            results = _context.sent;
            _context.next = 12;
            break;
          case 7:
            _context.t0 = (_options$option = options[option]) !== null && _options$option !== void 0 ? _options$option : defaultValue;
            if (!_context.t0) {
              _context.next = 12;
              break;
            }
            _context.next = 11;
            return validate();
          case 11:
            results = _context.sent;
          case 12:
            fieldArr = Object.keys(fields).filter(function(field) {
              var _fields$field;
              return (_fields$field = fields[field]) === null || _fields$field === void 0 || (_fields$field = _fields$field.options) === null || _fields$field === void 0 ? void 0 : _fields$field[option];
            }) || [];
            _context.t1 = isNotEmpty(fieldArr);
            if (!_context.t1) {
              _context.next = 18;
              break;
            }
            _context.next = 17;
            return validate(fieldArr);
          case 17:
            results = _context.sent;
          case 18:
            return _context.abrupt("return", results);
          case 19:
          case "end":
            return _context.stop();
        }
      }, _callee);
    }));
    return function validateOn2(_x, _x2) {
      return _ref3.apply(this, arguments);
    };
  }();
  var validateFieldOn = function validateFieldOn2(field, fieldOptions, option, defaultValue) {
    var _fieldOptions$option, _options$option2;
    ((_fieldOptions$option = fieldOptions === null || fieldOptions === void 0 ? void 0 : fieldOptions[option]) !== null && _fieldOptions$option !== void 0 ? _fieldOptions$option : isFieldValidate(field, (_options$option2 = options[option]) !== null && _options$option2 !== void 0 ? _options$option2 : defaultValue)) && validate(field);
  };
  var defineField = function defineField2(field, fieldOptions) {
    var _fields$field2, _resolve;
    if (!field) {
      return [];
    }
    (_fields$field2 = fields[field]) === null || _fields$field2 === void 0 || _fields$field2._watcher.stop();
    _states[field] || (_states[field] = getInitialState(field, fieldOptions === null || fieldOptions === void 0 ? void 0 : fieldOptions.initialValue));
    var props = mergeProps((_resolve = resolve(fieldOptions, _states[field])) === null || _resolve === void 0 ? void 0 : _resolve.props, resolve(fieldOptions === null || fieldOptions === void 0 ? void 0 : fieldOptions.props, _states[field]), {
      name: field,
      onBlur: function onBlur() {
        _states[field].touched = true;
        validateFieldOn(field, fieldOptions, "validateOnBlur");
      },
      onInput: function onInput(event) {
        _states[field].value = event && Object.hasOwn(event, "value") ? event.value : event.target.value;
      },
      onChange: function onChange(event) {
        _states[field].value = event && Object.hasOwn(event, "value") ? event.value : event.target.type === "checkbox" || event.target.type === "radio" ? event.target.checked : event.target.value;
      },
      onInvalid: function onInvalid(errors) {
        var _errors$;
        _states[field].invalid = true;
        _states[field].errors = errors;
        _states[field].error = (_errors$ = errors === null || errors === void 0 ? void 0 : errors[0]) !== null && _errors$ !== void 0 ? _errors$ : null;
      }
    });
    var _watcher = watchPausable(function() {
      return _states[field].value;
    }, function(newValue, oldValue) {
      if (_states[field].pristine) {
        _states[field].pristine = false;
      }
      if (newValue !== oldValue) {
        _states[field].dirty = true;
      }
      validateFieldOn(field, fieldOptions, "validateOnValueUpdate", true);
    });
    fields[field] = {
      props,
      states: _states[field],
      options: fieldOptions,
      _watcher
    };
    return [_states[field], props];
  };
  var handleSubmit = function handleSubmit2(callback) {
    return function() {
      var _ref4 = _asyncToGenerator(_regeneratorRuntime().mark(function _callee2(event) {
        var results;
        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return validateOn("validateOnSubmit", true);
            case 2:
              results = _context2.sent;
              return _context2.abrupt("return", callback(_objectSpread({
                originalEvent: event,
                valid: toValue(valid),
                states: toValue(states),
                reset
              }, results)));
            case 4:
            case "end":
              return _context2.stop();
          }
        }, _callee2);
      }));
      return function(_x3) {
        return _ref4.apply(this, arguments);
      };
    }();
  };
  var handleReset = function handleReset2(callback) {
    return function() {
      var _ref5 = _asyncToGenerator(_regeneratorRuntime().mark(function _callee3(event) {
        return _regeneratorRuntime().wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              reset();
              return _context3.abrupt("return", callback({
                originalEvent: event
              }));
            case 2:
            case "end":
              return _context3.stop();
          }
        }, _callee3);
      }));
      return function(_x4) {
        return _ref5.apply(this, arguments);
      };
    }();
  };
  var validate = function() {
    var _ref6 = _asyncToGenerator(_regeneratorRuntime().mark(function _callee4(field) {
      var _yield$options$resolv, _options$resolver, _result, _result$errors;
      var resolverOptions, _ref9, names, values, result, flattenFields, _i, _Object$entries, _Object$entries$_i, fieldName, fieldInst, _fieldInst$options, _getValueByPath, _errors$2, fieldResolver, _yield$fieldResolver, fieldValue, fieldResult, errors;
      return _regeneratorRuntime().wrap(function _callee4$(_context4) {
        while (1) switch (_context4.prev = _context4.next) {
          case 0:
            resolverOptions = Object.entries(_states).reduce(function(acc, _ref7) {
              var _ref8 = _slicedToArray(_ref7, 2), key = _ref8[0], val = _ref8[1];
              acc.names.push(key);
              acc.values[key] = val.value;
              return acc;
            }, {
              names: [],
              values: {}
            });
            _ref9 = [resolverOptions.names, groupKeys(resolverOptions.values)], names = _ref9[0], values = _ref9[1];
            _context4.next = 4;
            return (_options$resolver = options.resolver) === null || _options$resolver === void 0 ? void 0 : _options$resolver.call(options, {
              names,
              values
            });
          case 4:
            _context4.t1 = _yield$options$resolv = _context4.sent;
            _context4.t0 = _context4.t1 !== null;
            if (!_context4.t0) {
              _context4.next = 8;
              break;
            }
            _context4.t0 = _yield$options$resolv !== void 0;
          case 8:
            if (!_context4.t0) {
              _context4.next = 12;
              break;
            }
            _context4.t2 = _yield$options$resolv;
            _context4.next = 13;
            break;
          case 12:
            _context4.t2 = {
              values
            };
          case 13:
            result = _context4.t2;
            (_result$errors = (_result = result).errors) !== null && _result$errors !== void 0 ? _result$errors : _result.errors = {};
            flattenFields = [field].flat();
            _i = 0, _Object$entries = Object.entries(fields);
          case 17:
            if (!(_i < _Object$entries.length)) {
              _context4.next = 45;
              break;
            }
            _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2), fieldName = _Object$entries$_i[0], fieldInst = _Object$entries$_i[1];
            if (!(flattenFields.includes(fieldName) || !field || isEmpty(result.errors))) {
              _context4.next = 42;
              break;
            }
            fieldResolver = (_fieldInst$options = fieldInst.options) === null || _fieldInst$options === void 0 ? void 0 : _fieldInst$options.resolver;
            if (!fieldResolver) {
              _context4.next = 37;
              break;
            }
            fieldValue = fieldInst.states.value;
            _context4.next = 25;
            return fieldResolver({
              values: fieldValue,
              value: fieldValue,
              name: fieldName
            });
          case 25:
            _context4.t4 = _yield$fieldResolver = _context4.sent;
            _context4.t3 = _context4.t4 !== null;
            if (!_context4.t3) {
              _context4.next = 29;
              break;
            }
            _context4.t3 = _yield$fieldResolver !== void 0;
          case 29:
            if (!_context4.t3) {
              _context4.next = 33;
              break;
            }
            _context4.t5 = _yield$fieldResolver;
            _context4.next = 34;
            break;
          case 33:
            _context4.t5 = {
              values: fieldValue
            };
          case 34:
            fieldResult = _context4.t5;
            isArray(fieldResult.errors) && (fieldResult.errors = _defineProperty({}, fieldName, fieldResult.errors));
            result = mergeKeys(result, fieldResult);
          case 37:
            errors = (_getValueByPath = getValueByPath(result.errors, fieldName)) !== null && _getValueByPath !== void 0 ? _getValueByPath : [];
            _states[fieldName].invalid = errors.length > 0;
            _states[fieldName].valid = !_states[fieldName].invalid;
            _states[fieldName].errors = errors;
            _states[fieldName].error = (_errors$2 = errors === null || errors === void 0 ? void 0 : errors[0]) !== null && _errors$2 !== void 0 ? _errors$2 : null;
          case 42:
            _i++;
            _context4.next = 17;
            break;
          case 45:
            return _context4.abrupt("return", _objectSpread(_objectSpread({}, result), {}, {
              errors: groupKeys(result.errors)
            }));
          case 46:
          case "end":
            return _context4.stop();
        }
      }, _callee4);
    }));
    return function validate2(_x5) {
      return _ref6.apply(this, arguments);
    };
  }();
  var reset = function reset2() {
    Object.keys(_states).forEach(function() {
      var _ref0 = _asyncToGenerator(_regeneratorRuntime().mark(function _callee5(field) {
        var _fields$field3;
        var watcher;
        return _regeneratorRuntime().wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              watcher = fields[field]._watcher;
              watcher.pause();
              fields[field].states = _states[field] = getInitialState(field, (_fields$field3 = fields[field]) === null || _fields$field3 === void 0 || (_fields$field3 = _fields$field3.options) === null || _fields$field3 === void 0 ? void 0 : _fields$field3.initialValue);
              _context5.next = 5;
              return nextTick();
            case 5:
              watcher.resume();
            case 6:
            case "end":
              return _context5.stop();
          }
        }, _callee5);
      }));
      return function(_x6) {
        return _ref0.apply(this, arguments);
      };
    }());
  };
  var setFieldValue = function setFieldValue2(field, value) {
    _states[field].value = value;
  };
  var getFieldState = function getFieldState2(field) {
    var _fields$field4;
    return (_fields$field4 = fields[field]) === null || _fields$field4 === void 0 ? void 0 : _fields$field4.states;
  };
  var setValues = function setValues2(values) {
    Object.keys(values).forEach(function(field) {
      return setFieldValue(field, values[field]);
    });
  };
  var validateOnMounted = function validateOnMounted2() {
    validateOn("validateOnMount");
  };
  tryOnMounted(validateOnMounted);
  return {
    defineField,
    setFieldValue,
    getFieldState,
    handleSubmit,
    handleReset,
    validate,
    setValues,
    reset,
    valid,
    states,
    fields
  };
};

// node_modules/.pnpm/@primevue+forms@4.3.4_vue@3.5.16/node_modules/@primevue/forms/form/style/index.mjs
var classes = {
  root: "p-form p-component"
};
var FormStyle = BaseStyle.extend({
  name: "form",
  classes
});

// node_modules/.pnpm/@primevue+forms@4.3.4_vue@3.5.16/node_modules/@primevue/forms/form/index.mjs
var script$1 = {
  name: "BaseForm",
  "extends": script,
  style: FormStyle,
  props: {
    resolver: {
      type: Function,
      "default": null
    },
    initialValues: {
      type: Object,
      "default": null
    },
    validateOnValueUpdate: {
      type: [Boolean, Array],
      "default": true
    },
    validateOnBlur: {
      type: [Boolean, Array],
      "default": false
    },
    validateOnMount: {
      type: [Boolean, Array],
      "default": false
    },
    validateOnSubmit: {
      type: [Boolean, Array],
      "default": true
    }
  },
  provide: function provide() {
    return {
      $pcForm: this,
      $parentInstance: this
    };
  }
};
function _typeof2(o) {
  "@babel/helpers - typeof";
  return _typeof2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
    return typeof o2;
  } : function(o2) {
    return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
  }, _typeof2(o);
}
function ownKeys2(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread2(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys2(Object(t), true).forEach(function(r2) {
      _defineProperty2(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys2(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
function _defineProperty2(e, r, t) {
  return (r = _toPropertyKey2(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e;
}
function _toPropertyKey2(t) {
  var i = _toPrimitive2(t, "string");
  return "symbol" == _typeof2(i) ? i : i + "";
}
function _toPrimitive2(t, r) {
  if ("object" != _typeof2(t) || !t) return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r);
    if ("object" != _typeof2(i)) return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
function _slicedToArray2(r, e) {
  return _arrayWithHoles2(r) || _iterableToArrayLimit2(r, e) || _unsupportedIterableToArray2(r, e) || _nonIterableRest2();
}
function _nonIterableRest2() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray2(r, a) {
  if (r) {
    if ("string" == typeof r) return _arrayLikeToArray2(r, a);
    var t = {}.toString.call(r).slice(8, -1);
    return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray2(r, a) : void 0;
  }
}
function _arrayLikeToArray2(r, a) {
  (null == a || a > r.length) && (a = r.length);
  for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];
  return n;
}
function _iterableToArrayLimit2(r, l) {
  var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (null != t) {
    var e, n, i, u, a = [], f = true, o = false;
    try {
      if (i = (t = t.call(r)).next, 0 === l) ;
      else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = true) ;
    } catch (r2) {
      o = true, n = r2;
    } finally {
      try {
        if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return;
      } finally {
        if (o) throw n;
      }
    }
    return a;
  }
}
function _arrayWithHoles2(r) {
  if (Array.isArray(r)) return r;
}
var script2 = {
  name: "Form",
  "extends": script$1,
  inheritAttrs: false,
  emits: ["submit", "reset"],
  setup: function setup(props, _ref) {
    var emit = _ref.emit;
    var formRef = ref(null);
    var $form = useForm(props);
    var submit = function submit2() {
      var _formRef$value;
      (_formRef$value = formRef.value) === null || _formRef$value === void 0 || _formRef$value.requestSubmit();
    };
    var register = function register2(field, options) {
      if (!(options !== null && options !== void 0 && options.novalidate)) {
        var _$form$defineField = $form.defineField(field, options), _$form$defineField2 = _slicedToArray2(_$form$defineField, 2), fieldProps = _$form$defineField2[1];
        return fieldProps;
      }
      return {};
    };
    var onSubmit = $form.handleSubmit(function(e) {
      emit("submit", e);
    });
    var onReset = $form.handleReset(function(e) {
      emit("reset", e);
    });
    return _objectSpread2({
      formRef,
      submit,
      register,
      onSubmit,
      onReset
    }, omit($form, ["handleSubmit", "handleReset"]));
  }
};
function render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("form", mergeProps({
    ref: "formRef",
    onSubmit: _cache[0] || (_cache[0] = withModifiers(function() {
      return $setup.onSubmit && $setup.onSubmit.apply($setup, arguments);
    }, ["prevent"])),
    onReset: _cache[1] || (_cache[1] = withModifiers(function() {
      return $setup.onReset && $setup.onReset.apply($setup, arguments);
    }, ["prevent"])),
    "class": _ctx.cx("root")
  }, _ctx.ptmi("root")), [renderSlot(_ctx.$slots, "default", mergeProps({
    register: $setup.register,
    valid: _ctx.valid,
    reset: _ctx.reset
  }, _ctx.states))], 16);
}
script2.render = render;
export {
  script2 as default
};
/*! Bundled license information:

@primevue/forms/useform/index.mjs:
  (*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE *)
*/
//# sourceMappingURL=@primevue_forms_form.js.map
