import {
  getDotPath,
  safeParse,
  safeParseAsync
} from "./chunk-D3T6UVMQ.js";
import {
  i,
  isNotEmpty
} from "./chunk-BRPYD3F2.js";
import "./chunk-BUSYA2B4.js";

// node_modules/.pnpm/@primeuix+forms@0.0.4/node_modules/@primeuix/forms/resolvers/valibot/index.mjs
var b = (n, a, f) => async ({ values: t, name: r }) => {
  var _a;
  let { sync: l = false, raw: u = false } = f || {};
  try {
    let e = l ? safeParse(n, t, { abortPipeEarly: false, ...a }) : await safeParseAsync(n, t, { abortPipeEarly: false, ...a });
    return e.success ? { values: i(u ? t : e.output, r), errors: {} } : { values: i(u ? t : void 0, r), errors: (_a = e.issues) == null ? void 0 : _a.reduce((s, i2) => {
      let p = getDotPath(i2), o = isNotEmpty(p) ? p : r;
      return o && (s[o] || (s[o] = []), s[o].push(i2)), s;
    }, {}) };
  } catch (e) {
    throw e;
  }
};
export {
  b as valibotResolver
};
//# sourceMappingURL=@primevue_forms_resolvers_valibot.js.map
