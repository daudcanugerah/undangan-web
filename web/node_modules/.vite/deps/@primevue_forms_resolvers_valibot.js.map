{
  "version": 3,
  "sources": ["../../.pnpm/@primeuix+forms@0.0.4/node_modules/@primeuix/src/resolvers/valibot/index.ts"],
  "sourcesContent": ["import { toValues } from '@primeuix/forms/utils';\nimport { isNotEmpty } from '@primeuix/utils/object';\nimport { getDotPath, InferOutput, safeParse, safeParseAsync } from 'valibot';\nimport type { ResolverOptions, ResolverResult } from '..';\n\nexport const valibotResolver =\n    <T>(schema: any, schemaOptions?: any, resolverOptions?: ResolverOptions) =>\n    async ({ values, name }: any): Promise<ResolverResult<T>> => {\n        const { sync = false, raw = false } = resolverOptions || {};\n\n        try {\n            const result: InferOutput<any> | Promise<InferOutput<any>> = sync ? safeParse(schema, values, { abortPipeEarly: false, ...schemaOptions }) : await safeParseAsync(schema, values, { abortPipeEarly: false, ...schemaOptions });\n\n            if (result.success) {\n                return {\n                    values: toValues(raw ? values : result.output, name),\n                    errors: {}\n                };\n            } else {\n                return {\n                    values: toValues(raw ? values : undefined, name),\n                    errors: result.issues?.reduce((acc: Record<string, any[]>, error: any) => {\n                        const path = getDotPath(error);\n                        const pathKey = isNotEmpty(path) ? path : name;\n\n                        if (pathKey) {\n                            acc[pathKey] ||= [];\n                            acc[pathKey].push(error);\n                        }\n\n                        return acc;\n                    }, {})\n                };\n            }\n        } catch (e: any) {\n            throw e;\n        }\n    };\n"],
  "mappings": ";;;;;;;;;;;;AAKO,IAAMA,IACT,CAAIC,GAAaC,GAAqBC,MACtC,OAAO,EAAE,QAAAC,GAAQ,MAAAC,EAAK,MAAuC;AAPjE;AAQQ,MAAM,EAAE,MAAAC,IAAO,OAAO,KAAAC,IAAM,MAAM,IAAIJ,KAAmB,CAAC;AAE1D,MAAI;AACA,QAAMK,IAAuDF,IAAOG,UAAUR,GAAQG,GAAQ,EAAE,gBAAgB,OAAO,GAAGF,EAAc,CAAC,IAAI,MAAMQ,eAAeT,GAAQG,GAAQ,EAAE,gBAAgB,OAAO,GAAGF,EAAc,CAAC;AAE7N,WAAIM,EAAO,UACA,EACH,QAAQG,EAASJ,IAAMH,IAASI,EAAO,QAAQH,CAAI,GACnD,QAAQ,CAAC,EACb,IAEO,EACH,QAAQM,EAASJ,IAAMH,IAAS,QAAWC,CAAI,GAC/C,SAAQG,OAAO,WAAPA,mBAAe,OAAO,CAACI,GAA4BC,OAAe;AACtE,UAAMC,IAAOC,WAAWF,EAAK,GACvBG,IAAUC,WAAWH,CAAI,IAAIA,IAAOT;AAE1C,aAAIW,MACAJ,gBAAiB,CAAC,IAClBA,EAAII,CAAO,EAAE,KAAKH,EAAK,IAGpBD;IACX,GAAG,CAAC,GACR;EAER,SAAS,GAAQ;AACb,UAAM;EACV;AACJ;",
  "names": ["valibotResolver", "schema", "schemaOptions", "resolverOptions", "values", "name", "sync", "raw", "result", "safeParse", "safeParseAsync", "toValues", "acc", "error", "path", "getDotPath", "pathKey", "isNotEmpty"]
}
