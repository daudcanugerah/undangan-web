//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var Templates = newTemplatesTable("", "templates", "")

type templatesTable struct {
	sqlite.Table

	// Columns
	ID            sqlite.ColumnString
	Name          sqlite.ColumnString
	Description   sqlite.ColumnString
	PriceInterval sqlite.ColumnString
	Price         sqlite.ColumnInteger
	Type          sqlite.ColumnString
	Tags          sqlite.ColumnString
	CoverImage    sqlite.ColumnString
	State         sqlite.ColumnInteger
	CreatedAt     sqlite.ColumnString
	UpdatedAt     sqlite.ColumnString

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
	DefaultColumns sqlite.ColumnList
}

type TemplatesTable struct {
	templatesTable

	EXCLUDED templatesTable
}

// AS creates new TemplatesTable with assigned alias
func (a TemplatesTable) AS(alias string) *TemplatesTable {
	return newTemplatesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new TemplatesTable with assigned schema name
func (a TemplatesTable) FromSchema(schemaName string) *TemplatesTable {
	return newTemplatesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new TemplatesTable with assigned table prefix
func (a TemplatesTable) WithPrefix(prefix string) *TemplatesTable {
	return newTemplatesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new TemplatesTable with assigned table suffix
func (a TemplatesTable) WithSuffix(suffix string) *TemplatesTable {
	return newTemplatesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newTemplatesTable(schemaName, tableName, alias string) *TemplatesTable {
	return &TemplatesTable{
		templatesTable: newTemplatesTableImpl(schemaName, tableName, alias),
		EXCLUDED:       newTemplatesTableImpl("", "excluded", ""),
	}
}

func newTemplatesTableImpl(schemaName, tableName, alias string) templatesTable {
	var (
		IDColumn            = sqlite.StringColumn("id")
		NameColumn          = sqlite.StringColumn("name")
		DescriptionColumn   = sqlite.StringColumn("description")
		PriceIntervalColumn = sqlite.StringColumn("price_interval")
		PriceColumn         = sqlite.IntegerColumn("price")
		TypeColumn          = sqlite.StringColumn("type")
		TagsColumn          = sqlite.StringColumn("tags")
		CoverImageColumn    = sqlite.StringColumn("cover_image")
		StateColumn         = sqlite.IntegerColumn("state")
		CreatedAtColumn     = sqlite.StringColumn("created_at")
		UpdatedAtColumn     = sqlite.StringColumn("updated_at")
		allColumns          = sqlite.ColumnList{IDColumn, NameColumn, DescriptionColumn, PriceIntervalColumn, PriceColumn, TypeColumn, TagsColumn, CoverImageColumn, StateColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns      = sqlite.ColumnList{NameColumn, DescriptionColumn, PriceIntervalColumn, PriceColumn, TypeColumn, TagsColumn, CoverImageColumn, StateColumn, CreatedAtColumn, UpdatedAtColumn}
		defaultColumns      = sqlite.ColumnList{}
	)

	return templatesTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:            IDColumn,
		Name:          NameColumn,
		Description:   DescriptionColumn,
		PriceInterval: PriceIntervalColumn,
		Price:         PriceColumn,
		Type:          TypeColumn,
		Tags:          TagsColumn,
		CoverImage:    CoverImageColumn,
		State:         StateColumn,
		CreatedAt:     CreatedAtColumn,
		UpdatedAt:     UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
