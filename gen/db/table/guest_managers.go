//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var GuestManagers = newGuestManagersTable("", "guest_managers", "")

type guestManagersTable struct {
	sqlite.Table

	// Columns
	ID         sqlite.ColumnString
	TemplateID sqlite.ColumnString
	Name       sqlite.ColumnString
	GroupName  sqlite.ColumnString
	Person     sqlite.ColumnInteger
	Tags       sqlite.ColumnString
	Telp       sqlite.ColumnString
	Address    sqlite.ColumnString
	Message    sqlite.ColumnString
	Attend     sqlite.ColumnBool
	ViewAt     sqlite.ColumnString
	CreatedAt  sqlite.ColumnString
	UpdatedAt  sqlite.ColumnString

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
	DefaultColumns sqlite.ColumnList
}

type GuestManagersTable struct {
	guestManagersTable

	EXCLUDED guestManagersTable
}

// AS creates new GuestManagersTable with assigned alias
func (a GuestManagersTable) AS(alias string) *GuestManagersTable {
	return newGuestManagersTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new GuestManagersTable with assigned schema name
func (a GuestManagersTable) FromSchema(schemaName string) *GuestManagersTable {
	return newGuestManagersTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new GuestManagersTable with assigned table prefix
func (a GuestManagersTable) WithPrefix(prefix string) *GuestManagersTable {
	return newGuestManagersTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new GuestManagersTable with assigned table suffix
func (a GuestManagersTable) WithSuffix(suffix string) *GuestManagersTable {
	return newGuestManagersTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newGuestManagersTable(schemaName, tableName, alias string) *GuestManagersTable {
	return &GuestManagersTable{
		guestManagersTable: newGuestManagersTableImpl(schemaName, tableName, alias),
		EXCLUDED:           newGuestManagersTableImpl("", "excluded", ""),
	}
}

func newGuestManagersTableImpl(schemaName, tableName, alias string) guestManagersTable {
	var (
		IDColumn         = sqlite.StringColumn("id")
		TemplateIDColumn = sqlite.StringColumn("template_id")
		NameColumn       = sqlite.StringColumn("name")
		GroupNameColumn  = sqlite.StringColumn("group_name")
		PersonColumn     = sqlite.IntegerColumn("person")
		TagsColumn       = sqlite.StringColumn("tags")
		TelpColumn       = sqlite.StringColumn("telp")
		AddressColumn    = sqlite.StringColumn("address")
		MessageColumn    = sqlite.StringColumn("message")
		AttendColumn     = sqlite.BoolColumn("attend")
		ViewAtColumn     = sqlite.StringColumn("view_at")
		CreatedAtColumn  = sqlite.StringColumn("created_at")
		UpdatedAtColumn  = sqlite.StringColumn("updated_at")
		allColumns       = sqlite.ColumnList{IDColumn, TemplateIDColumn, NameColumn, GroupNameColumn, PersonColumn, TagsColumn, TelpColumn, AddressColumn, MessageColumn, AttendColumn, ViewAtColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns   = sqlite.ColumnList{TemplateIDColumn, NameColumn, GroupNameColumn, PersonColumn, TagsColumn, TelpColumn, AddressColumn, MessageColumn, AttendColumn, ViewAtColumn, CreatedAtColumn, UpdatedAtColumn}
		defaultColumns   = sqlite.ColumnList{}
	)

	return guestManagersTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		TemplateID: TemplateIDColumn,
		Name:       NameColumn,
		GroupName:  GroupNameColumn,
		Person:     PersonColumn,
		Tags:       TagsColumn,
		Telp:       TelpColumn,
		Address:    AddressColumn,
		Message:    MessageColumn,
		Attend:     AttendColumn,
		ViewAt:     ViewAtColumn,
		CreatedAt:  CreatedAtColumn,
		UpdatedAt:  UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
