// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package model

import (
	"encoding/json"
	"time"

	"github.com/ggicci/httpin"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for UserRole.
const (
	N1 UserRole = 1
	N2 UserRole = 2
)

type PaginationRequest struct {
	Limit int `in:"query=limit"`
	Page  int `in:"query=page"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Status  int    `json:"status"`
	Error   string `json:"error,omitempty"`
	Message string `json:"message,omitempty"`
}

type GuestListRequest struct {
	PaginationRequest
	UserTemplateID string `in:"query=user_template_id"`
}

type GuestUpdateMessageRequest struct {
	Payload struct {
		ID      string `json:"id,omitempty"`
		Attend  bool   `json:"attend,omitempty"`
		Message string `json:"message,omitempty"`
	} `in:"body=json" json:"payload,omitempty"` // use "body=xml" for XML formatted body
}

type IdentityRequest struct {
	ID string `in:"path=id"`
}

type GuestCreateRequest struct {
	Payload struct {
		UserTemplateId string   `json:"user_template_id,omitempty"`
		Address        string   `json:"address,omitempty"`
		Group          string   `json:"group,omitempty"`
		Name           string   `json:"name,omitempty"`
		Person         int      `json:"person,omitempty"`
		Tags           []string `json:"tags,omitempty"`
		Telp           string   `json:"telp,omitempty"`
	} `in:"body=json" json:"payload,omitempty"` // use "body=xml" for XML formatted body
}

type GuestListResult struct {
	Total int     `json:"total"`
	Data  []Guest `json:"data"`
}

type SafeGuest struct {
	Attend  *bool      `json:"attend,omitempty"`
	Group   string     `json:"group,omitempty"`
	Id      string     `json:"id,omitempty"`
	Message string     `json:"message,omitempty"`
	Address string     `json:"address,omitempty"`
	Name    string     `json:"name,omitempty"`
	ViewAt  *time.Time `json:"view_at,omitempty"`
	Person  int        `json:"person,omitempty"`
}

// Guest defines model for Guest.
type Guest struct {
	Address        string     `json:"address,omitempty"`
	Attend         *bool      `json:"attend,omitempty"`
	CreatedAt      time.Time  `json:"created_at,omitempty"`
	Group          string     `json:"group,omitempty"`
	Id             string     `json:"id,omitempty"`
	Message        string     `json:"message,omitempty"`
	Name           string     `json:"name,omitempty"`
	Person         int        `json:"person,omitempty"`
	Tags           []string   `json:"tags,omitempty"`
	Telp           string     `json:"telp,omitempty"`
	UpdatedAt      time.Time  `json:"updated_at,omitempty"`
	UserTemplateId string     `json:"user_template_id,omitempty"`
	ViewAt         *time.Time `json:"view_at,omitempty"`
}

// LoginRequest defines model for LoginRequest.
type LoginRequest struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

// LoginResponse defines model for LoginResponse.
type LoginResponse struct {
	Token *string `json:"token,omitempty"`
}

// MessageTemplate defines model for MessageTemplate.
type MessageTemplate struct {
	Provider string `json:"provider,omitempty"`
	Text     string `json:"text,omitempty"`
}

type PublicTemplateListResult struct {
	Total           int              `json:"total"`
	PublicTemplates []PublicTemplate `json:"data"`
}

// PublicTemplate defines model for PublicTemplate.
type PublicTemplate struct {
	CoverImage    string    `json:"cover_image,omitempty"`
	CreatedAt     time.Time `json:"created_at,omitempty"`
	Slug          string    `json:"slug,omitempty"`
	Description   string    `json:"description,omitempty"`
	Id            string    `json:"id,omitempty"`
	Name          string    `json:"name,omitempty"`
	Price         int       `json:"price,omitempty"`
	PriceInterval string    `json:"price_interval,omitempty"`
	State         int       `json:"state,omitempty"`
	Tags          []string  `json:"tags,omitempty"`
	Type          string    `json:"type,omitempty"`
	UpdatedAt     time.Time `json:"updated_at,omitempty"`
}

type PublicTemplateCreateRequest struct {
	CoverImage    *httpin.File `in:"form=cover_image"`
	ZipFile       *httpin.File `in:"form=zip_file"`
	Description   string       `in:"form=description"`
	Name          string       `in:"form=name"`
	Price         int          `in:"form=price"`
	PriceInterval string       `in:"form=price_interval"`
	State         int          `in:"form=state"`
	Tags          []string     `in:"form=tags"`
	Type          string       `in:"form=type"`
}

// UserTemplate defines model for UserTemplate.
type UserTemplateCreateRequest struct {
	Slug            string       `in:"form=slug"`
	URL             string       `in:"form=url"`
	BaseTemplateId  string       `in:"form=base_template_id"`
	CoverImage      *httpin.File `in:"form=cover_image"`
	ZipFile         *httpin.File `in:"form=zip_file"`
	MessageTemplate string       `in:"form=message_template"`
	Name            string       `in:"form=name"`
	ExpireAt        time.Time    `in:"form=expire_at"`
}

func (u *UserTemplateCreateRequest) GetMessageTemplate() ([]MessageTemplate, error) {
	var result []MessageTemplate

	if err := json.Unmarshal([]byte(u.MessageTemplate), &result); err != nil {
		return result, err
	}
	return result, nil
}

type RegisterUser struct {
	Name     string       `in:"form=name"`
	Email    string       `in:"form=email"`
	Password string       `in:"form=password"`
	Profile  *httpin.File `in:"form=profile"`
}

type Safeuser struct {
	CreatedAt time.Time `json:"created_at,omitempty"`
	Email     string    `json:"email,omitempty"`
	Id        string    `json:"id,omitempty"`
	IsActive  bool      `json:"is_active,omitempty"`
	Name      string    `json:"name,omitempty"`
	Role      UserRole  `json:"role,omitempty"`
	UpdatedAt time.Time `json:"updated_at,omitempty"`
}

// User defines model for User.
type User struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`
	Email     *string    `json:"email,omitempty"`
	Password  string     `json:"Password"`
	Id        *string    `json:"id,omitempty"`
	IsActive  *bool      `json:"is_active,omitempty"`
	Name      *string    `json:"name,omitempty"`
	Profile   *string    `json:"profile,omitempty"`
	Role      *UserRole  `json:"role,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// UserRole defines model for User.Role.
type UserRole int

// UserTemplate defines model for UserTemplate.
type UserTemplateListResult struct {
	Total int            `json:"total"`
	Data  []UserTemplate `json:"data"`
}
type UserTemplate struct {
	BaseTemplateId  string                     `json:"base_template_id,omitempty"`
	CoverImage      string                     `json:"cover_image,omitempty"`
	CreatedAt       time.Time                  `json:"created_at,omitempty"`
	ExpireAt        time.Time                  `json:"expire_at,omitempty"`
	Id              string                     `json:"id,omitempty"`
	MessageTemplate map[string]MessageTemplate `json:"message_template,omitempty"`
	Name            string                     `json:"name,omitempty"`
	Slug            string                     `json:"slug,omitempty"`
	State           int                        `json:"state,omitempty"`
	UpdatedAt       time.Time                  `json:"updated_at,omitempty"`
	Url             string                     `json:"url,omitempty"`
	UserId          string                     `json:"user_id,omitempty"`
}

// PatchPublicGuestsIdJSONBody defines parameters for PatchPublicGuestsId.
type PatchPublicGuestsIdJSONBody struct {
	Message *string `json:"message,omitempty"`
}

// PatchUsersJSONBody defines parameters for PatchUsers.
type PatchUsersJSONBody struct {
	IsActive *bool   `json:"is_active,omitempty"`
	UserId   *string `json:"userId,omitempty"`
}
