// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package rest

import (
	"context"
	"fmt"
	"net/http"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for PatchAdminUsersUserIdStateJSONBodyState.
const (
	N0 PatchAdminUsersUserIdStateJSONBodyState = 0
	N1 PatchAdminUsersUserIdStateJSONBodyState = 1
)

// AdminLoginRequest defines model for AdminLoginRequest.
type AdminLoginRequest struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// AuthResponse defines model for AuthResponse.
type AuthResponse struct {
	AccessToken *string `json:"access_token,omitempty"`
	TokenType   *string `json:"token_type,omitempty"`
}

// Guest defines model for Guest.
type Guest struct {
	Attend     *bool   `json:"attend,omitempty"`
	Message    *string `json:"message,omitempty"`
	Name       *string `json:"name,omitempty"`
	TemplateId *string `json:"template_id,omitempty"`
}

// LoginRequest defines model for LoginRequest.
type LoginRequest struct {
	Email    openapi_types.Email `json:"email"`
	Password string              `json:"password"`
}

// RegisterRequest defines model for RegisterRequest.
type RegisterRequest struct {
	Email    openapi_types.Email `json:"email"`
	Name     string              `json:"name"`
	Password string              `json:"password"`
}

// Template defines model for Template.
type Template struct {
	Content     *string `json:"content,omitempty"`
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// UserTemplate defines model for UserTemplate.
type UserTemplate struct {
	ExpireAt   *time.Time `json:"expire_at,omitempty"`
	State      *int       `json:"state,omitempty"`
	TemplateId *string    `json:"template_id,omitempty"`
	UserId     *string    `json:"user_id,omitempty"`
}

// PatchAdminUsersUserIdStateJSONBody defines parameters for PatchAdminUsersUserIdState.
type PatchAdminUsersUserIdStateJSONBody struct {
	State *PatchAdminUsersUserIdStateJSONBodyState `json:"state,omitempty"`
}

// PatchAdminUsersUserIdStateJSONBodyState defines parameters for PatchAdminUsersUserIdState.
type PatchAdminUsersUserIdStateJSONBodyState int

// PatchInviteTemplateIdGuestGuestIdRsvpJSONBody defines parameters for PatchInviteTemplateIdGuestGuestIdRsvp.
type PatchInviteTemplateIdGuestGuestIdRsvpJSONBody struct {
	Attend  *bool   `json:"attend,omitempty"`
	Message *string `json:"message,omitempty"`
}

// PostAdminLoginJSONRequestBody defines body for PostAdminLogin for application/json ContentType.
type PostAdminLoginJSONRequestBody = AdminLoginRequest

// PostAdminTemplatesJSONRequestBody defines body for PostAdminTemplates for application/json ContentType.
type PostAdminTemplatesJSONRequestBody = Template

// PutAdminTemplatesIdJSONRequestBody defines body for PutAdminTemplatesId for application/json ContentType.
type PutAdminTemplatesIdJSONRequestBody = Template

// PostAdminUserTemplatesJSONRequestBody defines body for PostAdminUserTemplates for application/json ContentType.
type PostAdminUserTemplatesJSONRequestBody = UserTemplate

// PatchAdminUsersUserIdStateJSONRequestBody defines body for PatchAdminUsersUserIdState for application/json ContentType.
type PatchAdminUsersUserIdStateJSONRequestBody PatchAdminUsersUserIdStateJSONBody

// PostAuthLoginJSONRequestBody defines body for PostAuthLogin for application/json ContentType.
type PostAuthLoginJSONRequestBody = LoginRequest

// PostAuthRegisterJSONRequestBody defines body for PostAuthRegister for application/json ContentType.
type PostAuthRegisterJSONRequestBody = RegisterRequest

// PostGuestsJSONRequestBody defines body for PostGuests for application/json ContentType.
type PostGuestsJSONRequestBody = Guest

// PatchGuestsIdJSONRequestBody defines body for PatchGuestsId for application/json ContentType.
type PatchGuestsIdJSONRequestBody = Guest

// PatchInviteTemplateIdGuestGuestIdRsvpJSONRequestBody defines body for PatchInviteTemplateIdGuestGuestIdRsvp for application/json ContentType.
type PatchInviteTemplateIdGuestGuestIdRsvpJSONRequestBody PatchInviteTemplateIdGuestGuestIdRsvpJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Authenticate admin
	// (POST /admin/login)
	PostAdminLogin(w http.ResponseWriter, r *http.Request)
	// Create a new template
	// (POST /admin/templates)
	PostAdminTemplates(w http.ResponseWriter, r *http.Request)
	// Update existing template
	// (PUT /admin/templates/{id})
	PutAdminTemplatesId(w http.ResponseWriter, r *http.Request, id string)
	// Assign a template to a user
	// (POST /admin/user-templates)
	PostAdminUserTemplates(w http.ResponseWriter, r *http.Request)
	// Activate or deactivate a user
	// (PATCH /admin/users/{user_id}/state)
	PatchAdminUsersUserIdState(w http.ResponseWriter, r *http.Request, userId string)
	// Authenticate user and get token
	// (POST /auth/login)
	PostAuthLogin(w http.ResponseWriter, r *http.Request)
	// Register a new user
	// (POST /auth/register)
	PostAuthRegister(w http.ResponseWriter, r *http.Request)
	// Add a new guest
	// (POST /guests)
	PostGuests(w http.ResponseWriter, r *http.Request)
	// Update guest details
	// (PATCH /guests/{id})
	PatchGuestsId(w http.ResponseWriter, r *http.Request, id string)
	// Public view of guest invitation
	// (GET /invite/{template_id}/guest/{guest_id})
	GetInviteTemplateIdGuestGuestId(w http.ResponseWriter, r *http.Request, templateId string, guestId string)
	// RSVP and send a message
	// (PATCH /invite/{template_id}/guest/{guest_id}/rsvp)
	PatchInviteTemplateIdGuestGuestIdRsvp(w http.ResponseWriter, r *http.Request, templateId string, guestId string)
	// Get all public templates
	// (GET /templates)
	GetTemplates(w http.ResponseWriter, r *http.Request)
	// Get current user's templates
	// (GET /user-templates)
	GetUserTemplates(w http.ResponseWriter, r *http.Request)
	// Delete a user template
	// (DELETE /user-templates/{id})
	DeleteUserTemplatesId(w http.ResponseWriter, r *http.Request, id string)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Authenticate admin
// (POST /admin/login)
func (_ Unimplemented) PostAdminLogin(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new template
// (POST /admin/templates)
func (_ Unimplemented) PostAdminTemplates(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update existing template
// (PUT /admin/templates/{id})
func (_ Unimplemented) PutAdminTemplatesId(w http.ResponseWriter, r *http.Request, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Assign a template to a user
// (POST /admin/user-templates)
func (_ Unimplemented) PostAdminUserTemplates(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Activate or deactivate a user
// (PATCH /admin/users/{user_id}/state)
func (_ Unimplemented) PatchAdminUsersUserIdState(w http.ResponseWriter, r *http.Request, userId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Authenticate user and get token
// (POST /auth/login)
func (_ Unimplemented) PostAuthLogin(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Register a new user
// (POST /auth/register)
func (_ Unimplemented) PostAuthRegister(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add a new guest
// (POST /guests)
func (_ Unimplemented) PostGuests(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update guest details
// (PATCH /guests/{id})
func (_ Unimplemented) PatchGuestsId(w http.ResponseWriter, r *http.Request, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Public view of guest invitation
// (GET /invite/{template_id}/guest/{guest_id})
func (_ Unimplemented) GetInviteTemplateIdGuestGuestId(w http.ResponseWriter, r *http.Request, templateId string, guestId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// RSVP and send a message
// (PATCH /invite/{template_id}/guest/{guest_id}/rsvp)
func (_ Unimplemented) PatchInviteTemplateIdGuestGuestIdRsvp(w http.ResponseWriter, r *http.Request, templateId string, guestId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get all public templates
// (GET /templates)
func (_ Unimplemented) GetTemplates(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get current user's templates
// (GET /user-templates)
func (_ Unimplemented) GetUserTemplates(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a user template
// (DELETE /user-templates/{id})
func (_ Unimplemented) DeleteUserTemplatesId(w http.ResponseWriter, r *http.Request, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// PostAdminLogin operation middleware
func (siw *ServerInterfaceWrapper) PostAdminLogin(w http.ResponseWriter, r *http.Request) {
	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAdminLogin(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostAdminTemplates operation middleware
func (siw *ServerInterfaceWrapper) PostAdminTemplates(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAdminTemplates(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PutAdminTemplatesId operation middleware
func (siw *ServerInterfaceWrapper) PutAdminTemplatesId(w http.ResponseWriter, r *http.Request) {
	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutAdminTemplatesId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostAdminUserTemplates operation middleware
func (siw *ServerInterfaceWrapper) PostAdminUserTemplates(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAdminUserTemplates(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PatchAdminUsersUserIdState operation middleware
func (siw *ServerInterfaceWrapper) PatchAdminUsersUserIdState(w http.ResponseWriter, r *http.Request) {
	var err error

	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", chi.URLParam(r, "user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchAdminUsersUserIdState(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostAuthLogin operation middleware
func (siw *ServerInterfaceWrapper) PostAuthLogin(w http.ResponseWriter, r *http.Request) {
	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAuthLogin(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostAuthRegister operation middleware
func (siw *ServerInterfaceWrapper) PostAuthRegister(w http.ResponseWriter, r *http.Request) {
	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAuthRegister(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostGuests operation middleware
func (siw *ServerInterfaceWrapper) PostGuests(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostGuests(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PatchGuestsId operation middleware
func (siw *ServerInterfaceWrapper) PatchGuestsId(w http.ResponseWriter, r *http.Request) {
	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchGuestsId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetInviteTemplateIdGuestGuestId operation middleware
func (siw *ServerInterfaceWrapper) GetInviteTemplateIdGuestGuestId(w http.ResponseWriter, r *http.Request) {
	var err error

	// ------------- Path parameter "template_id" -------------
	var templateId string

	err = runtime.BindStyledParameterWithOptions("simple", "template_id", chi.URLParam(r, "template_id"), &templateId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "template_id", Err: err})
		return
	}

	// ------------- Path parameter "guest_id" -------------
	var guestId string

	err = runtime.BindStyledParameterWithOptions("simple", "guest_id", chi.URLParam(r, "guest_id"), &guestId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "guest_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetInviteTemplateIdGuestGuestId(w, r, templateId, guestId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PatchInviteTemplateIdGuestGuestIdRsvp operation middleware
func (siw *ServerInterfaceWrapper) PatchInviteTemplateIdGuestGuestIdRsvp(w http.ResponseWriter, r *http.Request) {
	var err error

	// ------------- Path parameter "template_id" -------------
	var templateId string

	err = runtime.BindStyledParameterWithOptions("simple", "template_id", chi.URLParam(r, "template_id"), &templateId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "template_id", Err: err})
		return
	}

	// ------------- Path parameter "guest_id" -------------
	var guestId string

	err = runtime.BindStyledParameterWithOptions("simple", "guest_id", chi.URLParam(r, "guest_id"), &guestId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "guest_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchInviteTemplateIdGuestGuestIdRsvp(w, r, templateId, guestId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetTemplates operation middleware
func (siw *ServerInterfaceWrapper) GetTemplates(w http.ResponseWriter, r *http.Request) {
	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTemplates(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetUserTemplates operation middleware
func (siw *ServerInterfaceWrapper) GetUserTemplates(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUserTemplates(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteUserTemplatesId operation middleware
func (siw *ServerInterfaceWrapper) DeleteUserTemplatesId(w http.ResponseWriter, r *http.Request) {
	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteUserTemplatesId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/admin/login", wrapper.PostAdminLogin)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/admin/templates", wrapper.PostAdminTemplates)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/admin/templates/{id}", wrapper.PutAdminTemplatesId)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/admin/user-templates", wrapper.PostAdminUserTemplates)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/admin/users/{user_id}/state", wrapper.PatchAdminUsersUserIdState)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/auth/login", wrapper.PostAuthLogin)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/auth/register", wrapper.PostAuthRegister)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/guests", wrapper.PostGuests)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/guests/{id}", wrapper.PatchGuestsId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/invite/{template_id}/guest/{guest_id}", wrapper.GetInviteTemplateIdGuestGuestId)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/invite/{template_id}/guest/{guest_id}/rsvp", wrapper.PatchInviteTemplateIdGuestGuestIdRsvp)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/templates", wrapper.GetTemplates)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/user-templates", wrapper.GetUserTemplates)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/user-templates/{id}", wrapper.DeleteUserTemplatesId)
	})

	return r
}
