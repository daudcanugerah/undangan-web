//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var PublicTemplates = newPublicTemplatesTable("", "public_templates", "")

type publicTemplatesTable struct {
	sqlite.Table

	// Columns
	ID            sqlite.ColumnString
	Name          sqlite.ColumnString
	Description   sqlite.ColumnString
	PriceInterval sqlite.ColumnString
	Price         sqlite.ColumnInteger
	Type          sqlite.ColumnString
	Tags          sqlite.ColumnString
	CoverImage    sqlite.ColumnString
	State         sqlite.ColumnInteger
	CreatedAt     sqlite.ColumnTimestamp
	UpdatedAt     sqlite.ColumnTimestamp
	Slug          sqlite.ColumnString

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
	DefaultColumns sqlite.ColumnList
}

type PublicTemplatesTable struct {
	publicTemplatesTable

	EXCLUDED publicTemplatesTable
}

// AS creates new PublicTemplatesTable with assigned alias
func (a PublicTemplatesTable) AS(alias string) *PublicTemplatesTable {
	return newPublicTemplatesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new PublicTemplatesTable with assigned schema name
func (a PublicTemplatesTable) FromSchema(schemaName string) *PublicTemplatesTable {
	return newPublicTemplatesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new PublicTemplatesTable with assigned table prefix
func (a PublicTemplatesTable) WithPrefix(prefix string) *PublicTemplatesTable {
	return newPublicTemplatesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new PublicTemplatesTable with assigned table suffix
func (a PublicTemplatesTable) WithSuffix(suffix string) *PublicTemplatesTable {
	return newPublicTemplatesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newPublicTemplatesTable(schemaName, tableName, alias string) *PublicTemplatesTable {
	return &PublicTemplatesTable{
		publicTemplatesTable: newPublicTemplatesTableImpl(schemaName, tableName, alias),
		EXCLUDED:             newPublicTemplatesTableImpl("", "excluded", ""),
	}
}

func newPublicTemplatesTableImpl(schemaName, tableName, alias string) publicTemplatesTable {
	var (
		IDColumn            = sqlite.StringColumn("id")
		NameColumn          = sqlite.StringColumn("name")
		DescriptionColumn   = sqlite.StringColumn("description")
		PriceIntervalColumn = sqlite.StringColumn("price_interval")
		PriceColumn         = sqlite.IntegerColumn("price")
		TypeColumn          = sqlite.StringColumn("type")
		TagsColumn          = sqlite.StringColumn("tags")
		CoverImageColumn    = sqlite.StringColumn("cover_image")
		StateColumn         = sqlite.IntegerColumn("state")
		CreatedAtColumn     = sqlite.TimestampColumn("created_at")
		UpdatedAtColumn     = sqlite.TimestampColumn("updated_at")
		SlugColumn          = sqlite.StringColumn("slug")
		allColumns          = sqlite.ColumnList{IDColumn, NameColumn, DescriptionColumn, PriceIntervalColumn, PriceColumn, TypeColumn, TagsColumn, CoverImageColumn, StateColumn, CreatedAtColumn, UpdatedAtColumn, SlugColumn}
		mutableColumns      = sqlite.ColumnList{NameColumn, DescriptionColumn, PriceIntervalColumn, PriceColumn, TypeColumn, TagsColumn, CoverImageColumn, StateColumn, CreatedAtColumn, UpdatedAtColumn, SlugColumn}
		defaultColumns      = sqlite.ColumnList{DescriptionColumn, PriceIntervalColumn, PriceColumn, TypeColumn, TagsColumn, CoverImageColumn, StateColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return publicTemplatesTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:            IDColumn,
		Name:          NameColumn,
		Description:   DescriptionColumn,
		PriceInterval: PriceIntervalColumn,
		Price:         PriceColumn,
		Type:          TypeColumn,
		Tags:          TagsColumn,
		CoverImage:    CoverImageColumn,
		State:         StateColumn,
		CreatedAt:     CreatedAtColumn,
		UpdatedAt:     UpdatedAtColumn,
		Slug:          SlugColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
