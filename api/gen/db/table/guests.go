//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var Guests = newGuestsTable("", "guests", "")

type guestsTable struct {
	sqlite.Table

	// Columns
	ID             sqlite.ColumnString
	UserTemplateID sqlite.ColumnString
	Name           sqlite.ColumnString
	GroupName      sqlite.ColumnString
	Person         sqlite.ColumnInteger
	Tags           sqlite.ColumnString
	Telp           sqlite.ColumnString
	Address        sqlite.ColumnString
	Message        sqlite.ColumnString
	ViewAt         sqlite.ColumnTimestamp
	CreatedAt      sqlite.ColumnTimestamp
	Attend         sqlite.ColumnBool

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
	DefaultColumns sqlite.ColumnList
}

type GuestsTable struct {
	guestsTable

	EXCLUDED guestsTable
}

// AS creates new GuestsTable with assigned alias
func (a GuestsTable) AS(alias string) *GuestsTable {
	return newGuestsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new GuestsTable with assigned schema name
func (a GuestsTable) FromSchema(schemaName string) *GuestsTable {
	return newGuestsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new GuestsTable with assigned table prefix
func (a GuestsTable) WithPrefix(prefix string) *GuestsTable {
	return newGuestsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new GuestsTable with assigned table suffix
func (a GuestsTable) WithSuffix(suffix string) *GuestsTable {
	return newGuestsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newGuestsTable(schemaName, tableName, alias string) *GuestsTable {
	return &GuestsTable{
		guestsTable: newGuestsTableImpl(schemaName, tableName, alias),
		EXCLUDED:    newGuestsTableImpl("", "excluded", ""),
	}
}

func newGuestsTableImpl(schemaName, tableName, alias string) guestsTable {
	var (
		IDColumn             = sqlite.StringColumn("id")
		UserTemplateIDColumn = sqlite.StringColumn("user_template_id")
		NameColumn           = sqlite.StringColumn("name")
		GroupNameColumn      = sqlite.StringColumn("group_name")
		PersonColumn         = sqlite.IntegerColumn("person")
		TagsColumn           = sqlite.StringColumn("tags")
		TelpColumn           = sqlite.StringColumn("telp")
		AddressColumn        = sqlite.StringColumn("address")
		MessageColumn        = sqlite.StringColumn("message")
		ViewAtColumn         = sqlite.TimestampColumn("view_at")
		CreatedAtColumn      = sqlite.TimestampColumn("created_at")
		AttendColumn         = sqlite.BoolColumn("attend")
		allColumns           = sqlite.ColumnList{IDColumn, UserTemplateIDColumn, NameColumn, GroupNameColumn, PersonColumn, TagsColumn, TelpColumn, AddressColumn, MessageColumn, ViewAtColumn, CreatedAtColumn, AttendColumn}
		mutableColumns       = sqlite.ColumnList{UserTemplateIDColumn, NameColumn, GroupNameColumn, PersonColumn, TagsColumn, TelpColumn, AddressColumn, MessageColumn, ViewAtColumn, CreatedAtColumn, AttendColumn}
		defaultColumns       = sqlite.ColumnList{NameColumn, GroupNameColumn, PersonColumn, TagsColumn, TelpColumn, AddressColumn, MessageColumn, CreatedAtColumn, AttendColumn}
	)

	return guestsTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:             IDColumn,
		UserTemplateID: UserTemplateIDColumn,
		Name:           NameColumn,
		GroupName:      GroupNameColumn,
		Person:         PersonColumn,
		Tags:           TagsColumn,
		Telp:           TelpColumn,
		Address:        AddressColumn,
		Message:        MessageColumn,
		ViewAt:         ViewAtColumn,
		CreatedAt:      CreatedAtColumn,
		Attend:         AttendColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
