//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var UserTemplates = newUserTemplatesTable("", "user_templates", "")

type userTemplatesTable struct {
	sqlite.Table

	// Columns
	ID                 sqlite.ColumnString
	UserID             sqlite.ColumnString
	BaseUserTemplateID sqlite.ColumnString
	State              sqlite.ColumnInteger
	Slug               sqlite.ColumnString
	URL                sqlite.ColumnString
	MessageTemplate    sqlite.ColumnString
	Name               sqlite.ColumnString
	CoverImage         sqlite.ColumnString
	CreatedAt          sqlite.ColumnString
	UpdatedAt          sqlite.ColumnString
	ExpireAt           sqlite.ColumnString

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
	DefaultColumns sqlite.ColumnList
}

type UserTemplatesTable struct {
	userTemplatesTable

	EXCLUDED userTemplatesTable
}

// AS creates new UserTemplatesTable with assigned alias
func (a UserTemplatesTable) AS(alias string) *UserTemplatesTable {
	return newUserTemplatesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UserTemplatesTable with assigned schema name
func (a UserTemplatesTable) FromSchema(schemaName string) *UserTemplatesTable {
	return newUserTemplatesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UserTemplatesTable with assigned table prefix
func (a UserTemplatesTable) WithPrefix(prefix string) *UserTemplatesTable {
	return newUserTemplatesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UserTemplatesTable with assigned table suffix
func (a UserTemplatesTable) WithSuffix(suffix string) *UserTemplatesTable {
	return newUserTemplatesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUserTemplatesTable(schemaName, tableName, alias string) *UserTemplatesTable {
	return &UserTemplatesTable{
		userTemplatesTable: newUserTemplatesTableImpl(schemaName, tableName, alias),
		EXCLUDED:           newUserTemplatesTableImpl("", "excluded", ""),
	}
}

func newUserTemplatesTableImpl(schemaName, tableName, alias string) userTemplatesTable {
	var (
		IDColumn                 = sqlite.StringColumn("id")
		UserIDColumn             = sqlite.StringColumn("user_id")
		BaseUserTemplateIDColumn = sqlite.StringColumn("base_user_template_id")
		StateColumn              = sqlite.IntegerColumn("state")
		SlugColumn               = sqlite.StringColumn("slug")
		URLColumn                = sqlite.StringColumn("url")
		MessageTemplateColumn    = sqlite.StringColumn("message_template")
		NameColumn               = sqlite.StringColumn("name")
		CoverImageColumn         = sqlite.StringColumn("cover_image")
		CreatedAtColumn          = sqlite.StringColumn("created_at")
		UpdatedAtColumn          = sqlite.StringColumn("updated_at")
		ExpireAtColumn           = sqlite.StringColumn("expire_at")
		allColumns               = sqlite.ColumnList{IDColumn, UserIDColumn, BaseUserTemplateIDColumn, StateColumn, SlugColumn, URLColumn, MessageTemplateColumn, NameColumn, CoverImageColumn, CreatedAtColumn, UpdatedAtColumn, ExpireAtColumn}
		mutableColumns           = sqlite.ColumnList{UserIDColumn, BaseUserTemplateIDColumn, StateColumn, SlugColumn, URLColumn, MessageTemplateColumn, NameColumn, CoverImageColumn, CreatedAtColumn, UpdatedAtColumn, ExpireAtColumn}
		defaultColumns           = sqlite.ColumnList{}
	)

	return userTemplatesTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                 IDColumn,
		UserID:             UserIDColumn,
		BaseUserTemplateID: BaseUserTemplateIDColumn,
		State:              StateColumn,
		Slug:               SlugColumn,
		URL:                URLColumn,
		MessageTemplate:    MessageTemplateColumn,
		Name:               NameColumn,
		CoverImage:         CoverImageColumn,
		CreatedAt:          CreatedAtColumn,
		UpdatedAt:          UpdatedAtColumn,
		ExpireAt:           ExpireAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
