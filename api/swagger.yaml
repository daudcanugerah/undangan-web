openapi: 3.0.0
info:
  title: Online Invitation API
  version: 1.0.0
  description: API for managing wedding invitations and guests

servers:
  - url: https://api.example.com/v1
    description: Production server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
        name:
          type: string
        profile:
          type: string
        role:
          type: integer
          enum: [1, 2]
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    PublicTemplate:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        priceInterval:
          type: string
        price:
          type: integer
        type:
          type: string
        tags:
          type: array
          items:
            type: string
        coverImage:
          type: string
        state:
          type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    UserTemplate:
      type: object
      properties:
        id:
          type: string
        userId:
          type: string
        baseTemplateId:
          type: string
        state:
          type: integer
        slug:
          type: string
        url:
          type: string
        messageTemplate:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/MessageTemplate'
        name:
          type: string
        coverImage:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        expireAt:
          type: string
          format: date-time
    MessageTemplate:
      type: object
      properties:
        text:
          type: string
        provider:
          type: string
    Guest:
      type: object
      properties:
        id:
          type: string
        userTemplateId:
          type: string
        name:
          type: string
        group:
          type: string
        person:
          type: integer
        tags:
          type: array
          items:
            type: string
        telp:
          type: string
        address:
          type: string
        message:
          type: string
        attend:
          type: boolean
        viewAt:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
        password:
          type: string
    LoginResponse:
      type: object
      properties:
        token:
          type: string
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
        message:
          type: string

paths:
  /auth/login:
    post:
      tags:
        - Auth
      summary: User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/register:
    post:
      tags:
        - Auth
      summary: Register new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User created successfully
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/logout:
    post:
      tags:
        - Auth
      summary: User logout
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successfully logged out
        '401':
          description: Unauthorized

  /users:
    get:
      tags:
        - User Manager
      summary: List all users
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
    patch:
      tags:
        - User Manager
      summary: Change user state
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                isActive:
                  type: boolean
      responses:
        '200':
          description: User state updated
        '401':
          description: Unauthorized
        '404':
          description: User not found

  /users/{id}:
    get:
      tags:
        - User Manager
      summary: Get user by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
        '404':
          description: User not found

  /public-templates:
    get:
      tags:
        - Public Template Manager
      summary: List all public templates
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of public templates
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PublicTemplate'
        '401':
          description: Unauthorized
    post:
      tags:
        - Public Template Manager
      summary: Create a new public template
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PublicTemplate'
      responses:
        '201':
          description: Template created
        '401':
          description: Unauthorized

  /public-templates/{id}:
    get:
      tags:
        - Public Template Manager
      summary: Get public template by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Public template details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicTemplate'
        '401':
          description: Unauthorized
        '404':
          description: Public template not found
    put:
      tags:
        - Public Template Manager
      summary: Update a public template
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PublicTemplate'
      responses:
        '200':
          description: Template updated
        '401':
          description: Unauthorized
        '404':
          description: Template not found
    delete:
      tags:
        - Public Template Manager
      summary: Delete a public template
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Template deleted
        '401':
          description: Unauthorized
        '404':
          description: Template not found

  /user-templates:
    get:
      tags:
        - User Template Manager
      summary: List all user templates
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of user templates
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserTemplate'
        '401':
          description: Unauthorized
    post:
      tags:
        - User Template Manager
      summary: Create a new user template
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserTemplate'
      responses:
        '201':
          description: Template created
        '401':
          description: Unauthorized

  /user-templates/{id}:
    get:
      tags:
        - User Template Manager
      summary: Get user template by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User template details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserTemplate'
        '401':
          description: Unauthorized
        '404':
          description: User template not found
    put:
      tags:
        - User Template Manager
      summary: Update a user template
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserTemplate'
      responses:
        '200':
          description: Template updated
        '401':
          description: Unauthorized
        '404':
          description: Template not found
    delete:
      tags:
        - User Template Manager
      summary: Delete a user template
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Template deleted
        '401':
          description: Unauthorized
        '404':
          description: Template not found

  /guests:
    get:
      tags:
        - Guest Manager
      summary: List all guests
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of guests
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Guest'
        '401':
          description: Unauthorized
    post:
      tags:
        - Guest Manager
      summary: Create a new guest
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Guest'
      responses:
        '201':
          description: Guest created
        '401':
          description: Unauthorized

  /guests/{id}:
    get:
      tags:
        - Guest Manager
      summary: Get guest by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Guest details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Guest'
        '401':
          description: Unauthorized
        '404':
          description: Guest not found
    put:
      tags:
        - Guest Manager
      summary: Update a guest (except name)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Guest'
      responses:
        '200':
          description: Guest updated
        '401':
          description: Unauthorized
        '404':
          description: Guest not found
    delete:
      tags:
        - Guest Manager
      summary: Delete a guest
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Guest deleted
        '401':
          description: Unauthorized
        '404':
          description: Guest not found

  /public/guests/{id}:
    get:
      tags:
        - Public
      summary: Get guest by ID (no auth required)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Guest details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Guest'
        '404':
          description: Guest not found
    patch:
      tags:
        - Public
      summary: Update guest message (no auth required)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
      responses:
        '200':
          description: Message updated
        '404':
          description: Guest not found
